from random import randrange
import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
from vk.vk_info import VKInfo
from vk.vk_auth import token_group, service_key, user_db, password_db
from keyboard import UserKeyboard
from vkinderdb.db_functions import VkinderDB


class VkBot:
    db = VkinderDB(user=user_db, password=password_db)

    def __init__(self, token, service_key):
        self.vk_session = vk_api.VkApi(token=token)

    def bot_session(self):
        '''–§—É–Ω–∫—Ü–∏—è –ø–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å–æ–±—ã—Ç–∏–π'''

        for event in VkLongPoll(self.vk_session).listen():

            if event.type == VkEventType.MESSAGE_NEW and event.to_me:
                self.user_id = event.user_id

                if event.text.lower() in ('—Å—Ç–∞—Ä—Ç', '–Ω–∞—á–∞—Ç—å', 'start'):
                    keyboard = UserKeyboard.keyboard_menu()
                    self.sender(user_id=self.user_id, message='–ü—Ä–∏–≤–µ—Ç. –≠—Ç–æ –±–æ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤ - VKinder!!!',
                                keyboard=keyboard)
                    self.new_user()

                if event.text.lower() in ('‚úÖ–∑–∞–¥–∞—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞', 'üîÅ–∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞'):
                    keyboard = UserKeyboard.search_ok()
                    self.sender(user_id=self.user_id, message='–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞', keyboard=keyboard)
                    self.search_params()

                if event.text.lower() == 'üíó–Ω–∞–π—Ç–∏ –ø–∞—Ä—É':
                    keyboard = UserKeyboard.keyboard_search()
                    self.sender(user_id=self.user_id, message='–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫', keyboard=keyboard)
                    if self._check_search_params(self.user_id):
                        self.sender(user_id=self.user_id, message='–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω—ã. –ù–∞–∂–º–∏—Ç–µ'
                                                                  '–∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥", –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–¥–∞—Ç—å'
                                                                  '–∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞"',
                                    keyboard=keyboard)
                        continue

                    else:
                        self._download_pairs()
                        self._return_pair()

                if event.text == '–°–ª–µ–¥—É—é—â–∏–π':
                    if self.pairs is None:
                        self.sender(user_id=self.user_id,
                                    message='–ù–∏–∫—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø–æ–∏—Å–∫–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')
                        continue
                    self.sender(user_id=self.user_id, message='üíó')
                    self._return_pair()

                if event.text.lower() == 'üåü–∏–∑–±—Ä–∞–Ω–Ω–æ–µ':
                    keyboard = UserKeyboard.favorites()
                    self.sender(user_id=self.user_id, message='–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', keyboard=keyboard)
                    self.show_favourites()

                if event.text == 'üåü–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ':
                    self.sender(user_id=self.user_id, message='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', keyboard=keyboard)
                    self.add_favourites()

                # if event.text == '‚ùå–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ':
                #     self.sender(user_id=self.user_id, message='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ', keyboard=keyboard)
                #     self.del_favourites()

                if event.text.lower() == '–Ω–∞–∑–∞–¥':
                    keyboard = UserKeyboard.keyboard_menu()
                    self.sender(user_id=self.user_id, message='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', keyboard=keyboard)

    def sender(self, user_id, message, keyboard=None, attachment=None):
        '''–§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è'''
        self.params = {'user_id': user_id, 'message': message, 'random_id': randrange(10 ** 7)}

        if keyboard:
            self.params['keyboard'] = keyboard.get_keyboard()
        self.vk_session.method('messages.send', self.params)

    def new_user(self):
        info_user = VKInfo(service_key, self.user_id)
        user_data = info_user.get_user_info()
        photos = info_user.get_photos()

        if isinstance(user_data, dict):
            VkBot.db.add_new_user(user_data, photos)

        elif user_data == 1:
            vk_error = VkBot(token_group, service_key)
            vk_error.sender(user_id=self.user_id,
                            message='–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–¥–µ–ª–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–∫—Ä—ã—Ç—ã–º :)')
        elif user_data == 2:
            vk_error = VkBot(token_group, service_key)
            vk_error.sender(user_id=self.user_id, message='–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.'
                                                          '\n–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é '
                                                          '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: \n\n1) –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì); \n2) '
                                                          '–ì–æ—Ä–æ–¥.')

    def add_favourites(self):
        '''–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ (–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –º–æ–¥—É–ª–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –ë–î)'''
        VkBot.db.add_to_favorites(self.user_id, self.partner_id)

    def show_favourites(self):
        '''–§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ (–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –º–æ–¥—É–ª–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –ë–î)'''
        favourites_users = VkBot.db.show_favorites_users(finder_id=self.user_id)
        if favourites_users:
            result = '\n\n'.join(['\n'.join(list(user)) for user in favourites_users])
            keyboard = UserKeyboard.favorites()
            self.sender(user_id=self.user_id, message=result, keyboard=keyboard)
        else:
            self.sender(user_id=self.user_id, message='–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç')

    def _check_search_params(self, user_id):
        '''–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ –≤ –ë–î'''

        if not VkBot.db.search_params_exists(user_id):
            self.sender(user_id=self.user_id, message='–ó–∞–¥–∞–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞')
        return

    def search_params(self):
        '''–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∏—Å–∫–∞ '''

        params = {}
        self.sender(user_id=self.user_id, message='–í–æ–∑—Ä–∞—Å—Ç –æ—Ç... (—á–∏—Å–ª–æ)')
        for event in VkLongPoll(self.vk_session).listen():
            if event.type == VkEventType.MESSAGE_NEW and event.to_me:
                age_from = event.text
                if age_from.isdigit():
                    age_from = int(age_from)
                    if age_from >= 18:
                        params['from_age'] = age_from
                        break
                    else:
                        self.sender(user_id=self.user_id, message='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç–∞—Ä—à–µ 18, '
                                                                  '–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')
                else:
                    self.sender(user_id=self.user_id, message='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')

        self.sender(user_id=self.user_id, message='–í–æ–∑—Ä–∞—Å—Ç –¥–æ... (—á–∏—Å–ª–æ) ')
        for event in VkLongPoll(self.vk_session).listen():
            if event.type == VkEventType.MESSAGE_NEW and event.to_me:
                age_to = event.text
                if age_to.isdigit():
                    age_to = int(age_to)
                    if age_to >= 18:
                        params['to_age'] = age_to
                        break
                    else:
                        self.sender(user_id=self.user_id, message='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç–∞—Ä—à–µ 18, '
                                                                  '–ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')
                else:
                    self.sender(user_id=self.user_id, message='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')

        self.sender(user_id=self.user_id, message='–ü–æ–ª (–∂–µ–Ω—Å–∫–∏–π –∏–ª–∏ –º—É–∂—Å–∫–æ–π)')
        for event in VkLongPoll(self.vk_session).listen():
            if event.type == VkEventType.MESSAGE_NEW and event.to_me:
                gender = event.text.lower()
                if gender in ('–∂–µ–Ω—Å–∫–∏–π', '–º—É–∂—Å–∫–æ–π'):
                    params['sex'] = gender
                    break
                else:
                    self.sender(user_id=self.user_id, message='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')

        self.sender(user_id=self.user_id, message='–ì–æ—Ä–æ–¥ ')
        for event in VkLongPoll(self.vk_session).listen():
            if event.type == VkEventType.MESSAGE_NEW and event.to_me:
                if event.text != '':
                    params['city'] = event.text.title()
                    break
                else:
                    self.sender(user_id=self.user_id, message='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')
        params['user_id'] = self.user_id

        VkBot.db.add_search_params(params=params)
        self.sender(user_id=self.user_id, message='–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥", –∞ –∑–∞—Ç–µ–º "–ù–∞–π—Ç–∏ –ø–∞—Ä—É"!')

    def _return_pair(self):
        try:
            pair = next(self.pair_iter)
            user = list(pair)
            message = '\n'.join([str(param) for param in user[1:-1]])
            self.sender(user_id=self.user_id, message=message, attachment=user[-1])
            self.partner_id = user[0]

        except StopIteration:
            self._download_pairs()

            if self.pairs:
                pair = next(self.pair_iter)
                user = list(pair)
                message = '\n'.join([str(param) for param in user[1:-1]])
                self.sender(user_id=self.user_id, message=message, attachment=user[-1])
                self.partner_id = user[0]
            else:
                self.sender(user_id=self.user_id,
                            message='–ù–∏–∫—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø–æ–∏—Å–∫–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')

        except AttributeError:
            self.sender(user_id=self.user_id,
                        message='–ù–∏–∫—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø–æ–∏—Å–∫–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')

    def _download_pairs(self):
        self.pairs = VkBot.db.find_a_couple(self.user_id)
        self.pair_iter = iter([])
        if self.pairs:
            self.pair_iter = iter(self.pairs)


def main():
    vk_client = VkBot(token_group, service_key)
    vk_client.bot_session()


if __name__ == '__main__':
    main()
