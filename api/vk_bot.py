from random import randrange
import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
import vk.vk_info
from vk_auth import alt_token, service_key, user_db, password_db
from keyboard import UserKeyboard
from vkinderdb import main, db_functions
from vkinderdb.db_functions import VkinderDB

'''–°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å –±–æ—Ç–∞'''
class VkBot:
    def __init__(self, token, service_key):
        self.vk_session = vk_api.VkApi(token=token)
        self.user_id = self.get_user_id()

    def get_user_id(self):
        try:
            for self.event in VkLongPoll(self.vk_session).listen():
                if self.event.type == VkEventType.MESSAGE_NEW and self.event.to_me:
                    return self.event.user_id
        except Exception as ex:
            print(ex)

    '''–§—É–Ω–∫—Ü–∏—è –ø–æ —Ä–∞—Å–ø–æ–∑–Ω–æ–≤–∞–Ω–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å–æ–±—ã—Ç–∏–π'''

    def launch_bot(self):
        for self.event in VkLongPoll(self.vk_session).listen():
            if self.user_id:
                if self.event.type == VkEventType.MESSAGE_NEW and self.event.to_me:
                    # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if self.event.text.lower() == '—Å—Ç–∞—Ä—Ç':
                        keyboard = UserKeyboard.keyboard_menu()
                        self.sender(user_id=self.user_id, message='–ü—Ä–∏–≤–µ—Ç —ç—Ç–æ –±–æ—Ç VKinder!!!', keyboard=keyboard)
                        self.new_user()
                    if self.event.text.lower() == 'üíó–Ω–∞–π—Ç–∏ –ø–∞—Ä—É':
                        keyboard = UserKeyboard.keyboard_search()
                        self.sender(user_id=self.user_id, message='–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫', keyboard=keyboard)
                        self._check_search_params(self.user_id)
                        self.find_users()
                    if self.event.text.lower() in ('‚úÖ–∑–∞–¥–∞—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞', 'üîÅ–∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞'):
                        keyboard = UserKeyboard.search_ok()
                        self.sender(user_id=self.user_id, message='–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞', keyboard=keyboard)
                        self.search_params()
                    if self.event.text.lower() == 'üåü–∏–∑–±—Ä–∞–Ω–Ω–æ–µ':
                        keyboard = UserKeyboard.favorites()
                        self.sender(user_id=self.user_id, message='–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', keyboard=keyboard)
                        self.favourites()
                    if self.event.text == '‚û°–°–ª–µ–¥—É—é—â–∏–π':
                        self.sender(user_id=self.user_id, message='', keyboard=keyboard)
                        self.find_users()
                    if self.event.text == 'üåü–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ':
                        self.sender(user_id=self.user_id, message='–î–æ–±–∞–≤–∏–ª–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', keyboard=keyboard)
                        self.add_favourites()
                    if self.event.text.lower() == '–Ω–∞–∑–∞–¥':
                        keyboard = UserKeyboard.keyboard_menu()
                        self.sender(user_id=self.user_id, message='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', keyboard=keyboard)
                    if self.event.text == '‚ùå–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ':
                        self.sender(user_id=self.user_id, message='–£–¥–∞–ª–∏–ª–∏', keyboard=keyboard)
                        self.del_favourites()


    '''—Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è'''
    def sender(self, user_id, message, keyboard=None):
        self.params = {'user_id': user_id, 'message': message, 'random_id': randrange(10 ** 7)}
        if keyboard != None:
            self.params['keyboard'] = keyboard.get_keyboard()
        self.vk_session.method('messages.send', self.params)

    '''–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—ã (–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –º–æ–¥—É–ª–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –ë–î)'''
    def find_users(self):
        pass
        # keydoard = UserKeyboard.keyboard_search()
        # find_db = db_functions.VkinderDB()
        # users = find_db.find_a_couple(self.user_id)
        # if len(users) > 0:
        #     for user in users:
        #         user = list(user)
        #         self.sender(user_id=self.user_id, message=user[:-1], attachment=user[-1], keyboard=keydoard)



    '''–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ (–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –º–æ–¥—É–ª–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –ë–î)'''
    def add_favourites(self):
        pass

    '''–§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ (–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –º–æ–¥—É–ª–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –ë–î)'''
    def favourites(self):
        # show_favourites = db_functions.VkinderDB()
        # show_favourites.show_favorites_users()
        pass

    '''–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ (–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –º–æ–¥—É–ª–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –ë–î)'''
    def del_favourites(self):
        pass

    def _check_search_params(self, user_id):
        # '''–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ –≤ –ë–î'''
        # if not VkinderDB(self.user_db, self.password_db).search_params_exists(user_id):
        #     self.sender(user_id=self.user_id, message='–ó–∞–¥–∞–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞')
        # return
        pass

    '''–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∏—Å–∫–∞ '''
    def search_params(self):
        params = {}
        self.sender(user_id=self.user_id, message='–í–æ–∑—Ä–∞—Å—Ç –æ—Ç... (—á–∏—Å–ª–æ)')
        for self.event in VkLongPoll(self.vk_session).listen():
            if self.event.type == VkEventType.MESSAGE_NEW and self.event.to_me:
                if self.event.text.isdigit():
                    params['from_age'] = self.event.text
                    break

        self.sender(user_id=self.user_id, message='–í–æ–∑—Ä–∞—Å—Ç –¥–æ... (—á–∏—Å–ª–æ) ')
        for self.event in VkLongPoll(self.vk_session).listen():
            if self.event.type == VkEventType.MESSAGE_NEW and self.event.to_me:
                if self.event.text.isdigit():
                    params['to_age'] = self.event.text
                    break

        self.sender(user_id=self.user_id, message='–ü–æ–ª (–º—É–∂—á–∏–Ω–∞ –∏–ª–∏ –∂–µ–Ω—â–∏–Ω–∞)')
        for self.event in VkLongPoll(self.vk_session).listen():
            if self.event.type == VkEventType.MESSAGE_NEW and self.event.to_me:
                if self.event.text.lower() != '':
                    params['sex'] = self.event.text
                    break

        self.sender(user_id=self.user_id, message='–ì–æ—Ä–æ–¥ ')
        for self.event in VkLongPoll(self.vk_session).listen():
            if self.event.type == VkEventType.MESSAGE_NEW and self.event.to_me:
                if self.event.text.lower() != '':
                    params['city'] = self.event.text
                    break
        params['user_id'] = self.user_id
        # params_db = db_functions.VkinderDB(user=user_db, password=password_db)
        # params_db.add_search_params(params=params)
        self.sender(user_id=self.user_id, message='–í—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥", –∞ –∑–∞—Ç–µ–º "–ù–∞–π—Ç–∏ –ø–∞—Ä—É"!')




    def new_user(self):
        info_usr = vk.vk_info.VKInfo(service_key, self.user_id)
        user_data = info_usr.get_user_info()
        photos = info_usr.get_photos()
        # params_db = db_functions.VkinderDB(user=user_db, password=password_db)
        # params_db.add_new_user(user_data, photos)



def main():
    vk_client = VkBot(alt_token, service_key)
    vk_client.launch_bot()



if __name__ == '__main__':
    main()